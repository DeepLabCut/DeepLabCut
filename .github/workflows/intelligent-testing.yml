name: "Intelligent Python Testing"

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  intelligent-test-selection:
    runs-on: ubuntu-latest
    outputs:
      test-commands: ${{ steps.test-selector.outputs.commands }}
      run-full-tests: ${{ steps.test-selector.outputs.run-full-tests }}
      test-matrix: ${{ steps.test-selector.outputs.test-matrix }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch full history for diff comparison
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      
      - name: Run intelligent test selector
        id: test-selector
        shell: bash
        run: |
          # Install minimal dependencies for test selector
          python -m pip install --upgrade pip setuptools wheel
          pip install pytest numpy pandas
          
          # Determine the base reference to use
          BASE_REF="origin/main"
          if ! git rev-parse --verify $BASE_REF >/dev/null 2>&1; then
            echo "Warning: $BASE_REF not found, trying alternative references..."
            if git rev-parse --verify origin/main >/dev/null 2>&1; then
              BASE_REF="origin/main"
            elif git rev-parse --verify main >/dev/null 2>&1; then
              BASE_REF="main"
            else
              # Fallback to recent commits
              BASE_REF="HEAD~4"
            fi
          fi
          
          echo "Using base reference: $BASE_REF"
          
          # Run test selector and capture output
          python tools/test_selector.py --output-json --base $BASE_REF > test_selection.json
          
          # Parse the JSON output and set GitHub outputs
          cat test_selection.json
          
          # Use external scripts to parse JSON safely
          commands=$(python tools/parse_test_selection.py commands)
          run_full=$(python tools/parse_test_selection.py full-tests)
          matrix=$(python tools/parse_test_selection.py matrix)
          
          echo "commands=$commands" >> $GITHUB_OUTPUT
          echo "run-full-tests=$run_full" >> $GITHUB_OUTPUT
          echo "test-matrix=$matrix" >> $GITHUB_OUTPUT
          
          # Validate the test selection system
          echo "Running validation..."
          python tools/validate_test_selection.py

  fast-tests:
    needs: intelligent-test-selection
    if: needs.intelligent-test-selection.outputs.run-full-tests == 'false'
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.10"]
        test-config: ${{ fromJson(needs.intelligent-test-selection.outputs.test-matrix) }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: conda-incubator/setup-miniconda@v3
        with:
          channels: conda-forge,defaults
          channel-priority: strict
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies (minimal)
        shell: bash -el {0}
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install pytest
          # Only install minimal dependencies for fast tests
          pip install numpy pandas matplotlib scikit-learn

      - name: Install DeepLabCut (minimal)
        shell: bash -el {0}
        run: |
          pip install -e . --no-deps

      - name: Run selected tests
        shell: bash -el {0}
        env:
          TEST_COMMANDS: ${{ toJson(matrix.test-config.commands) }}
        run: |
          echo "Running test configuration: ${{ matrix.test-config.name }}"
          echo "Commands to run: $TEST_COMMANDS"
          
          # Use external script to execute commands safely
          python tools/execute_test_commands.py

  full-tests:
    needs: intelligent-test-selection
    if: needs.intelligent-test-selection.outputs.run-full-tests == 'true'
    uses: ./.github/workflows/python-package.yml